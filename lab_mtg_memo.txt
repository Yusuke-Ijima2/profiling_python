4/18
論文はテーマ発表会までに5個は見つけておく,全国大会はだめ

Web系の論文は海外の論文でないと探すのはむずいかも

１行ずつ切り分けられるか

Webアプリケーション

タスクマネージャーと一致しているか

一番ボトルネックを出す

ブラウザごとのGPUとかのアプリケーション

木曜までに論文4個探しとく

4/20
目的
コードを
gitからスクレイピングで取得できるか確認する、どんな問題があるかを整理
クローラー

4/25
プロファイリングライブラリの正当性を確かめる
公式ドキュメント、それが無理ならタスクマネージャーを利用する

木曜までに実際のプログラムで値を出せるようにする

----------
4/27
4/16の10時からmtg
4/18の13時から構想発表会（帰れないことを覚悟）

遅いプログラムと早いプログラムをchatGPTで検証
chatGPTではできないことを模索する
様々なパターンのプログラムを検証する

----------
5/9
様々なライブラリを使用して実行速度が早い変更ができるか確認してみる
例を上げる
目的設定、そのためには何をしなければならない、そのために子の解析ツールを使っています。
こうゆう直し方があるという提示方法にしたい。
それらに対してどうゆうものが想定されているかを考える
そのようなものができるか、対応できるか、対応できないか
簡単にできるもの
成約をつける、その妥当性を提示するまその妥当性を行う
デモのときは実装ステップごとにビジュアル化できる。
なぜそれをしてるのか、なぜそれをして、それが
具体的にこういうプログラムだったらどの様な
いろいろなものを
使ってる、共通して使っているのはどの様な
着目するものの意味が言えないとだめ、なぜ着目するのかの理由を言えないだめ
なんとうりかのものを試し、numpyを解決すればいい
プログラムの外と中できつい、中だけ
そこに着目するかピックアップしました。
ラベルをつける、再帰構造が中にある
分類していったらnumpy
制限の理由が
ある程度の範囲で構造分析できる自分のオリジナルを繰り返し
カテゴリ化をする、制御文の構造
とにかく理由が必須
具体性が足りない
何％とかを
全部は無理だからどうやればいいか（カテゴリ化をする）
どのようにカテゴリ化をするかというものを決める

---
これまでの研究ではこれが解決できてこれが解決できていない
のでじぶんはこれをする

改善策、技術、言語、環境、技術、評価方法

具体例を示す
最終目的にどんな感じでやれるか（機械学習か手でやるか）
今後のスケジュール、中間発表までのスケジュール
発表練習をする
4分30以下はだめ
代案も考える
引用も示せばあり
自分のデータをもとにこのゴールを実現できるという道筋が重要

木曜は長丁場、厳しいコメント覚悟

----------
リスト内包表記: すでに触れたように、リスト内包表記は従来のforループに比べて高速に動作します。

ビルトイン関数の利用: Pythonのビルトイン関数（len, sum, max, minなど）はCで実装されており、Pythonで同じことを行うよりも高速です。

ローカル変数の利用: グローバル変数よりもローカル変数の方が高速にアクセスできます。関数内で頻繁に使用する変数はローカル変数として定義すると良いでしょう。

関数の呼び出しを減らす: 関数の呼び出しは比較的時間がかかる操作なので、必要ない場合は避けると良いでしょう。

データ型の選択: Pythonには多様なデータ型がありますが、同じ操作でもデータ型によって速度が変わることがあります。たとえば、要素の追加や削除が多い場合はリストよりも集合（set）の方が高速です。

ライブラリの活用: Pythonには高速な計算を行うためのライブラリ（numpyやpandasなど）があります。これらはCやC++で実装されており、大量のデータに対する操作を高速に行うことができます。

---
6/1
最初は回答で、次はそれを変換してる
ASTの分析で自動化をしないとだめ
自分でやった結果を示す→AST解析を

8/7(月)は中間発表

---
6/6
forやwhile以外にもリスト内包表記にできるものを探してみる

内包表記にできないものが100個くらい見つけてその中でベスト5くらいみつけてそれで90%くらいだったら約90%の確率で識別できるということになるから、そこからは運、なのでほぼほぼサーチできているからまちがいない

変なコードとか混ざっているのを想定して、それがかけられたときにどうするかを言う

内包表記の変換の仕方をルール化する

カテゴリーを大きく絞ってfor文がこのような場合にはこのようなリスト内包表記に変えてこのアドバイスをするなど(完全には一致しないが参考になるか)

ここまでできて内包表記はこのようにすればいいというアドバイスができて、実行速度はこのくらい改善する

「実行速度はこのくらい改善する」ここをどうするかを考える

---
6/8
一旦無理やり内包表記にできるが判定されないものを判定できるようにしてみる

6/13
whileとforを使わないものをだして、その似ているものを出す
できるのかできないのかの確率で出す、chatGPTがそれ以上ありませんといったのは真か確かめる
中間発表はパターン判別

---
6/13 mtg
追い求めるのはやめる
各カテゴリーごとにどのように修正すればいいのかのカテゴリー分けをまずする
100個くらいの内包表記パターンを精査した後に、
とりあえず、何個くらいに分類できるかを精査する

6/15
ストーリーを絡めて話す
↓
リスト内包表記に絞る→相談
もちろん時間とリソールが許せば実装